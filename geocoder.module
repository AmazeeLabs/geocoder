<?php

/**
 * @file
 * Module file for geocoder module.
 */

/**
 * The Geocoder API call.
 *
 * Given a plugin id and data, geocode the data into an array using the handler.
 *
 * @param string $plugin_id
 *   The geocoder plugin id to use.
 * @param string $data
 *   Data to be passed into the handler for geocoding. For example a address string.
 * @param array $options
 *   Additional options to pass to the handler. Exact key / values to pass depend on the handler.
 *
 * @return array
 *
 * @example:
 *    geocoder('GoogleMaps', '1600 Amphitheatre Parkway Mountain View, CA 94043');
 */
function geocoder($plugin_id, $data, $options = array()) {
  $data_array = compact('plugin_id', 'data', 'options');
  ksort($data_array);
  $cid = sha1(serialize($data_array));

  if ($value = geocoder_cache_get($cid)) {
    return $value;
  }

  try {
    \Drupal\geocoder\Geocoder::setPlugin($plugin_id, $options);
    $value = \Drupal\geocoder\Geocoder::geocode($plugin_id, $data)->first()->toArray();
  } catch (Exception $e) {

  }

  if (is_array($value)) {
    geocoder_cache_set($cid, $value);
  }

  return $value;
}

/**
 * The Reverse geocoder API call.
 *
 * Given a plugin id, a latitude and a longitude, reverse geocode the data into an array using the handler.
 *
 * @param string $plugin_id
 *   The geocoder plugin id to use.
 * @param string $latitude
 *   The latitude.
 * @param string $longitude
 *   The longitude.
 * @param array $options
 *   Additional options to pass to the handler. Exact key / values to pass depend on the handler.
 *
 * @return array
 *
 * @example:
 *    reverse('GoogleMaps', '37.4224504', '-122.0840859');
 */
function reverse($plugin_id, $latitude, $longitude, $options = array()) {
  $data_array = compact('plugin_id', 'latitude', 'longitude', 'options');
  ksort($data_array);
  $cid = sha1(serialize($data_array));

  if ($value = geocoder_cache_get($cid)) {
    return $value;
  }

  try {
    \Drupal\geocoder\Geocoder::setPlugin($plugin_id, $options);
    $value = \Drupal\geocoder\Geocoder::reverse($plugin_id, $latitude, $longitude, $options)->first()->toArray();
  } catch (Exception $e) {

  }

  if (is_array($value)) {
    geocoder_cache_set($cid, $value);
  }

  return $value;
}

/**
 * Cache a geocoded result.
 *
 * @param string $cid
 *   The cache ID.
 * @param mixed $value
 *   The value to cache.
 */
function geocoder_cache_set($cid, $value) {
  // Don't cache no-results, to live geocode the same data again next time.
  if (!$value && variable_get('geocoder_cache_empty_results', TRUE)) {
    return;
  }

  cache_set($cid, $value, 'cache_geocoder', variable_get('geocoder_cache_ttl', CACHE_PERMANENT));
}

/**
 * Get a cached geocoded value.
 *
 * @param string $cid
 *   The cache ID.
 *
 * @return mixed
 *   The value
 */
function geocoder_cache_get($cid) {
  if ($cache = cache_get($cid, 'cache_geocoder')) {
    return $cache->data;
  }

  return FALSE;
}
