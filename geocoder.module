<?php

include_once('geocoder.widget.inc');
include_once('geocoder.services.inc');

/**
 * The Geocode API call.
 * @example:
 *    geocoder('google','4925 Gair Ave, Terrace, BC');
 *    geocoder('google','New York City',array('geometry_type' => 'bounds'));
 */
function geocoder() {
  ctools_include('plugins');

  $args = func_get_args();
  $processor_name = array_shift($args);
  $processor = ctools_get_plugins('geocoder', 'geocoder_handler', $processor_name);
  $geometry = call_user_func_array($processor['callback'],$args);

  return $geometry;
}


/**
 * Implements hook_menu().
 */
function  geocoder_menu() {
  // Admin settings for the site.
  $items['admin/config/content/geocoder'] = array(
    'title' => 'Geocoder settings',
    'description' => 'Configuration for API keys.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geocoder_admin_settings'),
    'file' => 'geocoder.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM, // optional
  );
  return $items;
}


/**
 * Return a list of all handlers that might geocoder something for you.
 */
function geocoder_handler_info($field_type = NULL) {
  ctools_include('plugins');

  static $handlers;
  if (!$handlers) {
    $handlers = ctools_get_plugins('geocoder', 'geocoder_handler');
  }
  if ($field_type) {
    $field_handlers = $handlers;
    foreach($field_handlers as $i => $handler) {
      if (!isset($handler['field_types']) || !in_array($field_type, $handler['field_types'])) {
        unset($field_handlers[$i]);
      }
    }
    return $field_handlers;
  }
  return $handlers;
}

/**
 * Fetch a geocoder handler
 */
function geocoder_get_handler($handler_name) {
  $handlers = geocoder_handler_info();
  return $handlers[$handler_name];
}

/**
 * Get a list of supported field types along with the processors that support them
 */
function geocoder_supported_field_types() {
  $supported = array();

  $processors = geocoder_handler_info();

  foreach ($processors as $processor) {
    if (isset($processor['field_types'])) {
      foreach ($processor['field_types'] as $field_type) {
        $supported[$field_type][] = $processor['name'];
      }
    }
  }

	return $supported;
}

/**
 * geoPHP loader
 */
function geocoder_load_geophp() {
  static $static_cache = FALSE;

  if (!$static_cache) {
    $path = libraries_get_path('geoPHP');
    $file = $path.'/geoPHP.inc';
    if (file_exists($file)) {
      if (include_once($file)) {
        $static_cache = $file;
      }
    }
  }

  return $static_cache;
}


/**
 * Implementation of hook_ctools_plugin_api().
 */
function geocoder_ctools_plugin_api() {
  return array('version' => 1);
}

/**
 * Implementation of hook_ctools_plugin_dierctory() to let the system know
 * we implement plugins.
 */
function geocoder_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_ctools_plugin_type
 */
function geocoder_ctools_plugin_type() {
  return array(
    'geocoder_handler' => array(),
  );
}

