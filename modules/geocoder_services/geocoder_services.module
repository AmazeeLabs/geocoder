<?php
/**
 * @file
 * Geocoder Services module.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function geocoder_services_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array('version' => 3);
  }
}

/**
 * Implements hook_permission().
 *
 * We define permissions for accessing geocoder over AJAX / services.
 * There is one global permission which gives access to everything,
 * and one permission per handler. The site-administrator can therefore
 * fine tune which handlers are accessible. Note that to use AJAX with
 * geocoder these permissions need to be set.
 */
function geocoder_services_permission() {
  $perms = array(
    'bypass_geocoder_services_access' =>  array(
      'title' => t('Bypass geocoder access control'),
    ),
  );

  foreach (\Drupal\geocoder\Geocoder::getPlugins() as $plugin_id) {
    $perms['geocoder_services_plugin_' . $plugin_id] = array(
      'title' => t('Can geocode using @plugin_id through AJAX / service', array('@plugin_id' => $plugin_id)),
    );
  }

  return $perms;
}

/**
 * Implements hook_services_resources().
 */
function geocoder_services_services_resources() {
  return array(
    'geocoder' => array(
      'retrieve' => array(
        'help' => 'Geocode data',
        'file' => array('type' => 'inc', 'module' => 'geocoder_services', 'name' => 'geocoder_services.services'),
        'callback' => 'geocoder_services_services_geocode',
        'access callback' => 'geocoder_services_services_access',
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'plugin',
            'type' => 'string',
            'description' => 'The geocoder plugin to use',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
          array(
            'name' => 'data',
            'type' => 'string',
            'description' => 'Value to geocode',
            'source' => array('param' => 'data'),
            'optional' => FALSE,
          ),
          array(
            'name' => 'output',
            'type' => 'string',
            'description' => 'Output format (json, gpx, WKT, etc.)',
            'source' => array('param' => 'output'),
            'optional' => TRUE,
            'default value' => 'json',
          ),
        ),
      ),
      'index' => array(
        'help' => 'List Geocoder Capabilities',
        'file' => array('type' => 'inc', 'module' => 'geocoder_services', 'name' => 'geocoder_services.services'),
        'callback' => 'geocoder_services_services_capabilities',
        'access callback' => 'geocoder_services_services_capabilities_ac', // Always returns TRUE
      ),
    ),
  );
}

/**
 * Return capabilities of the Geocoder service.
 *
 * @return \stdClass
 */
function geocoder_services_services_capabilities() {
  $object = new stdClass();
  $object->plugins = array_values(\Drupal\geocoder\Geocoder::getPlugins());
  $object->output = geoPHP::getAdapterMap();
  return $object;
}

/**
 * Callback for Geocoding service
 *
 * @param string $plugin_id
 * @param string $data
 * @param string $output (optional)
 *
 * @return object
 */
function geocoder_services_services_geocode($plugin_id, $data, $output) {
  geocoder_services_check_request($plugin_id, $output);

  if ($addresscollection = \Drupal\geocoder\Geocoder::geocode($plugin_id, $data)) {
    $raw = $addresscollection->first()->toArray();
    return array(
      'count' => $addresscollection->count(),
      'raw' => $raw,
      'formatted' => geoPHP::load(sprintf('Point (%s %s)', $raw['longitude'], $raw['latitude']))->out($output),
    );
  } else {
    return array(
      'count' => 0,
    );
  }
}

/**
 * Access control callback for the service resource: retrieve.
 *
 * @param $plugin_id
 * @param $data
 * @param $output
 *
 * @return bool
 */
function geocoder_services_services_access($plugin_id, $data, $output) {
  return geocoder_services_check_perms($plugin_id);
}

/**
 * Access control callback for the service resource: index.
 *
 * @return bool
 */
function geocoder_services_services_capabilities_ac() {
  return TRUE;
}

/**
 * Geocoder Services Check Request
 *
 * Check to make sure the request to the service is valid. This
 * checks to make sure the plugin and the format exists, and
 * also checks permission
 */
function geocoder_services_check_request($plugin_id, $output) {
  if (!geocoder_services_check_perms($plugin_id)) {
    drupal_access_denied();
    drupal_exit();
  }

  if (!(\Drupal::service('geocoder.Provider')->hasDefinition($plugin_id))) {
    drupal_set_message(t('Could not find plugin @plugin_id', array('@plugin_id' => $plugin_id)), 'error');
    drupal_not_found();
    drupal_exit();
  }

  if (!in_array($output, array_keys(geoPHP::getAdapterMap()))) {
    drupal_set_message(t('Could not find output adapter @output', array('@output' => $output)), 'error');
    drupal_not_found();
    drupal_exit();
  }
}

/**
 * Geocoder Services check permissions
 *
 * Given a plugin, check to see if the user has
 * permission to execute it via AJAX / services
 */
function geocoder_services_check_perms($plugin_id) {
  return (user_access('bypass_geocoder_services_access') || user_access('geocoder_services_plugin_' . $plugin_id));
}
